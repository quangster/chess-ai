import numpy as np

PAWN = np.array([
        [0,0,0,0,0,0,0,0],
        [0.5,1,1,-2,-2,1,1,0.5],
        [0.5,-0.5,-1.0,0,0,-1,-0.5,0.5],
        [0,0,0,2,2,0,0,0],
        [0.5,0.5,1,2.5,2.5,1,0.5,0.5],
        [1,1,2,3,3,2,1,1],
        [5,5,5,5,5,5,5,5],
        [0,0,0,0,0,0,0,0]
])

KNIGHT = np.array([
        [-5,-4,-3,-3,-3,-3,-4,-5],
	[-4,-2,0,0.5,0.5,0,-2,-4],
	[-3,0.5,1,1.5,1.5,1,0.5,-3],
	[-3,0,1.5,2,2,1.5,0,-3],
	[-3,0.5,1.5,2,2,1.5,0.5,-3],
	[-3,0,1,1.5,1.5,1,0,-3],
	[-4,-2,0,0,0,0,-2,-4],
	[-5,-4,-3,-3,-3,-3,-4,-5]
])

BISHOP = np.array([
        [-2,-1,-1,-1,-1,-1,-1,-2],
        [-1,0.5,0,0,0,0,0.5,-1],
        [-1,1,1,1,1,1,1,-1],
        [-1,0,1,1,1,1,0,-1],
        [-1,0.5,0.5,1,1,0.5,0.5,-1],
        [-1,0,0.5,1,1,0.5,0,-1],
        [-1,0,0,0,0,0,0,-1],
        [-2,-1,-1,-1,-1,-1,-1,-2]
])

ROCK = np.array([
        [0,0,0,0.5,0.5,0,0,0],
        [-0.5,0,0,0,0,0,0,-0.5],
        [-0.5,0,0,0,0,0,0,-0.5],
        [-0.5,0,0,0,0,0,0,-0.5],
        [-0.5,0,0,0,0,0,0,-0.5],
        [-0.5,0,0,0,0,0,0,-0.5],
        [0.5,1,1,1,1,1,1,0.5],
        [0,0,0,0,0,0,0,0]
])

QUEEN = np.array([
        [-2,-1,-1,-0.5,-0.5,-1,-1,-2],
        [-1,0,0.5,0,0,0,0,-1],
        [-1,0.5,0.5,0.5,0.5,0.5,0,-1],
        [0,0,0.5,0.5,0.5,0.5,0,-0.5],
        [-0.5,0,0.5,0.5,0.5,0.5,0,-0.5],
        [-1,0,0.5,0.5,0.5,0.5,0,-1],
        [-1,0,0,0,0,0,0,-1],
        [-2,-1,-1,-0.5,-0.5,-1,-1,-2]
])

KING = np.array([
        [2,3,1,0,0,2,3,1],
        [2,2,0,0,0,0,2,2],
        [-1,-2,-2,-2,-2,-2,-2,-1],
        [-2,-3,-3,-4,-4,-3,-3,-2],
        [-3,-4,-4,-5,-5,-4,-4,-3],
        [-3,-4,-4,-5,-5,-4,-4,-3],
        [-3,-4,-4,-5,-5,-4,-4,-3],
        [-3,-4,-4,-5,-5,-4,-4,-3]
])

SCORE_POS = {
	'r' : ROCK[::-1],
	'n' : KNIGHT[::-1],
	'b' : BISHOP[::-1],
	'q' : QUEEN[::-1],
	'k' : KING[::-1],
	'p' : PAWN[::-1],
	'R' : ROCK,
	'N' : KNIGHT,
	'B' : BISHOP,
	'Q' : QUEEN,
	'K' : KING,
	'P' : PAWN
}

SCORES = {
        'r' : -5,
	'n' : -3,
	'b' : -3,
	'q' : -9,
	'k' : -1000,
	'p' : -1,
	'R' : 5,
	'N' : 3,
	'B' : 3,
	'Q' : 9,
	'K' : 1000,
	'P' : 1
}

# Piece-Square tables. adapted from Sunfish.py:
# https://github.com/thomasahle/sunfish/blob/master/sunfish.py

PIECE = {"P": 100, "N": 280, "B": 320, "R": 479, "Q": 929, "K": 60000}
PST = {
    'P': (   0,   0,   0,   0,   0,   0,   0,   0,
            78,  83,  86,  73, 102,  82,  85,  90,
             7,  29,  21,  44,  40,  31,  44,   7,
           -17,  16,  -2,  15,  14,   0,  15, -13,
           -26,   3,  10,   9,   6,   1,   0, -23,
           -22,   9,   5, -11, -10,  -2,   3, -19,
           -31,   8,  -7, -37, -36, -14,   3, -31,
             0,   0,   0,   0,   0,   0,   0,   0),
    'N': ( -66, -53, -75, -75, -10, -55, -58, -70,
            -3,  -6, 100, -36,   4,  62,  -4, -14,
            10,  67,   1,  74,  73,  27,  62,  -2,
            24,  24,  45,  37,  33,  41,  25,  17,
            -1,   5,  31,  21,  22,  35,   2,   0,
           -18,  10,  13,  22,  18,  15,  11, -14,
           -23, -15,   2,   0,   2,   0, -23, -20,
           -74, -23, -26, -24, -19, -35, -22, -69),
    'B': ( -59, -78, -82, -76, -23,-107, -37, -50,
           -11,  20,  35, -42, -39,  31,   2, -22,
            -9,  39, -32,  41,  52, -10,  28, -14,
            25,  17,  20,  34,  26,  25,  15,  10,
            13,  10,  17,  23,  17,  16,   0,   7,
            14,  25,  24,  15,   8,  25,  20,  15,
            19,  20,  11,   6,   7,   6,  20,  16,
            -7,   2, -15, -12, -14, -15, -10, -10),
    'R': (  35,  29,  33,   4,  37,  33,  56,  50,
            55,  29,  56,  67,  55,  62,  34,  60,
            19,  35,  28,  33,  45,  27,  25,  15,
             0,   5,  16,  13,  18,  -4,  -9,  -6,
           -28, -35, -16, -21, -13, -29, -46, -30,
           -42, -28, -42, -25, -25, -35, -26, -46,
           -53, -38, -31, -26, -29, -43, -44, -53,
           -30, -24, -18,   5,  -2, -18, -31, -32),
    'Q': (   6,   1,  -8,-104,  69,  24,  88,  26,
            14,  32,  60, -10,  20,  76,  57,  24,
            -2,  43,  32,  60,  72,  63,  43,   2,
             1, -16,  22,  17,  25,  20, -13,  -6,
           -14, -15,  -2,  -5,  -1, -10, -20, -22,
           -30,  -6, -13, -11, -16, -11, -16, -27,
           -36, -18,   0, -19, -15, -15, -21, -38,
           -39, -30, -31, -13, -31, -36, -34, -42),
    'K': (   4,  54,  47, -99, -99,  60,  83, -62,
           -32,  10,  55,  56,  56,  55,  10,   3,
           -62,  12, -57,  44, -67,  28,  37, -31,
           -55,  50,  11,  -4, -19,  13,   0, -49,
           -55, -43, -52, -28, -51, -47,  -8, -50,
           -47, -42, -43, -79, -64, -32, -29, -32,
            -4,   3, -14, -50, -57, -18,  13,   4,
            17,  30,  -3, -14,   6,  -1,  40,  18),
}

# Tomasz Michniewski's Simplified Evaluation Function
# https://www.chessprogramming.org/Simplified_Evaluation_Function

import chess

PIECE_VALUES = {
    chess.PAWN: 100,
    chess.ROOK: 500,
    chess.KNIGHT: 320,
    chess.BISHOP: 330,
    chess.QUEEN: 900,
    chess.KING: 20000,
}

PAWN_WHITE = [
    0,  0,  0,  0,  0,  0,  0,  0,
    5, 10, 10, -20, -20, 10, 10,  5,
    5, -5, -10,  0,  0, -10, -5,  5,
    0,  0,  0, 20, 20,  0,  0,  0,
    5,  5, 10, 25, 25, 10,  5,  5,
    10, 10, 20, 30, 30, 20, 10, 10,
    50, 50, 50, 50, 50, 50, 50, 50,
    0, 0, 0, 0, 0, 0, 0, 0
]

PAWN_BLACK = list(reversed(PAWN_WHITE))

KNIGHT_WHITE = [
    -50, -40, -30, -30, -30, -30, -40, -50,
    -40, -20, 0, 0, 0, 0, -20, -40,
    -30, 0, 10, 15, 15, 10, 0, -30,
    -30, 5, 15, 20, 20, 15, 5, -30,
    -30, 0, 15, 20, 20, 15, 0, -30,
    -30, 5, 10, 15, 15, 10, 5, -30,
    -40, -20, 0, 5, 5, 0, -20, -40,
    -50, -40, -30, -30, -30, -30, -40, -50
]

KNIGHT_BLACK = list(reversed(KNIGHT_WHITE))

BISHOP_WHITE = [
    -20, -10, -10, -10, -10, -10, -10, -20,
    -10, 5, 0, 0, 0, 0, 5, -10,
    -10, 10, 10, 10, 10, 10, 10, -10,
    -10, 0, 10, 10, 10, 10, 0, -10,
    -10, 5, 5, 10, 10, 5, 5, -10,
    -10, 0, 5, 10, 10, 5, 0, -10,
    -10, 0, 0, 0, 0, 0, 0, -10,
    -20, -10, -10, -10, -10, -10, -10, -20
]

BISHOP_BLACK = list(reversed(BISHOP_WHITE))

ROOK_WHITE = [
    0, 0, 0, 5, 5, 0, 0, 0,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    5, 10, 10, 10, 10, 10, 10, 5,
    0, 0, 0, 0, 0, 0, 0, 0
]

ROOK_BLACK = list(reversed(ROOK_WHITE))

QUEEN_WHITE = [
    -20, -10, -10, -5, -5, -10, -10, -20,
    -10, 0, 0, 0, 0, 0, 0, -10,
    -10, 0, 5, 5, 5, 5, 0, -10,
    -5, 0, 5, 5, 5, 5, 0, -5,
    0, 0, 5, 5, 5, 5, 0, -5,
    -10, 5, 5, 5, 5, 5, 0, -10,
    -10, 0, 5, 0, 0, 0, 0, -10,
    -20, -10, -10, -5, -5, -10, -10, -20
]

QUEEN_BLACK = list(reversed(QUEEN_WHITE))


KING_WHITE = [
    20, 30, 10, 0, 0, 10, 30, 20,
    20, 20, 0, 0, 0, 0, 20, 20,
    -10, -20, -20, -20, -20, -20, -20, -10,
    20, -30, -30, -40, -40, -30, -30, -20,
    -30, -40, -40, -50, -50, -40, -40, -30,
    -30, -40, -40, -50, -50, -40, -40, -30,
    -30, -40, -40, -50, -50, -40, -40, -30,
    -30, -40, -40, -50, -50, -40, -40, -30
]

KING_BLACK = list(reversed(KING_WHITE))

KING_END_WHITE = [
    50, -30, -30, -30, -30, -30, -30, -50,
    -30, -30,  0,  0,  0,  0, -30, -30,
    -30, -10, 20, 30, 30, 20, -10, -30,
    -30, -10, 30, 40, 40, 30, -10, -30,
    -30, -10, 30, 40, 40, 30, -10, -30,
    -30, -10, 20, 30, 30, 20, -10, -30,
    -30, -20, -10,  0,  0, -10, -20, -30,
    -50, -40, -30, -20, -20, -30, -40, -50
]

KING_END_BLACK = list(reversed(KING_END_WHITE))

MATE_SCORE     = 1000000000
MATE_THRESHOLD =  999000000